// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String? // For credentials provider
  image         String?
  role          String    @default("customer") // customer, admin, collaborator
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  orders              Order[]
  addresses           Address[]
  reviews             Review[]
  wishlist            Wishlist[]
  cart                Cart?
  returnRequests      ReturnRequest[]
  stockNotifications  StockNotification[]
  savedPaymentMethods SavedPaymentMethod[]
  sizingProfile       UserSizingProfile?
  productCollaborations ProductCollaborator[]

  @@index([email])
  @@index([role])
}

// Order model
model Order {
  id                String   @id @default(cuid())
  userId            String?
  stripeSessionId   String   @unique
  status            String   @default("pending") // pending, processing, shipped, delivered, completed, cancelled
  total             Int // in cents
  currency          String   @default("CAD")
  items             Json // Array of cart items with product details
  shippingAddress   Json // Address object
  customerEmail     String
  customerName      String
  trackingNumber    String? // Shipping tracking number
  carrier           String? // "Canada Post", "UPS", "FedEx", etc.
  statusHistory     Json[] // Array of {status, timestamp, note}
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  returnRequests ReturnRequest[]

  @@index([userId])
  @@index([stripeSessionId])
  @@index([customerEmail])
  @@index([createdAt])
  @@index([status])
}

// Address model for saved addresses
model Address {
  id         String   @id @default(cuid())
  userId     String
  name       String // e.g., "Home", "Work", "Office"
  street     String
  city       String
  province   String
  postalCode String
  country    String   @default("Canada")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Review model
model Review {
  id          String   @id @default(cuid())
  userId      String
  productSlug String
  rating      Int // 1-5 stars
  comment     String?  @db.Text
  verified    Boolean  @default(false) // Only true if user purchased this product
  helpful     Int      @default(0) // Count of helpful votes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productSlug]) // One review per user per product
  @@index([productSlug])
  @@index([rating])
  @@index([createdAt])
}

// Wishlist model
model Wishlist {
  id          String   @id @default(cuid())
  userId      String
  productSlug String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productSlug]) // One wishlist entry per user per product
  @@index([userId])
  @@index([productSlug])
}

// Cart model for authenticated users
model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  items     Json // Array of cart items with product details
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Product inventory tracking
model ProductInventory {
  id                String   @id @default(cuid())
  productSlug       String   @unique
  sizeQuantities    Json     // {S: 10, M: 15, L: 8, XL: 12, XXL: 5}
  lowStockThreshold Int      @default(5)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([productSlug])
}

// Return request model
model ReturnRequest {
  id             String   @id @default(cuid())
  orderId        String
  userId         String
  reason         String   @db.Text
  status         String   @default("pending") // pending, approved, rejected, completed
  refundAmount   Int // in cents
  itemsReturning Json // Array of items being returned
  images         Json[] // Optional photos of items
  adminNotes     String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Search history for analytics
model SearchHistory {
  id        String   @id @default(cuid())
  userId    String?
  query     String
  results   Int // Number of results found
  clicked   String? // Product slug if user clicked a result
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([query])
  @@index([createdAt])
}

// Email automation models
model EmailSubscription {
  id            String   @id @default(cuid())
  email         String   @unique
  subscribed    Boolean  @default(true)
  source        String? // "checkout", "newsletter", "account"
  unsubscribeToken String @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email])
  @@index([subscribed])
}

model EmailCampaign {
  id              String   @id @default(cuid())
  type            String // "welcome", "cart_abandonment", "post_purchase", "newsletter"
  subject         String
  htmlContent     String   @db.Text
  textContent     String?  @db.Text
  status          String   @default("draft") // "draft", "scheduled", "sent", "cancelled"
  scheduledFor    DateTime?
  sentAt          DateTime?
  recipientCount  Int      @default(0)
  openCount       Int      @default(0)
  clickCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([type])
  @@index([status])
  @@index([scheduledFor])
}

model EmailLog {
  id            String   @id @default(cuid())
  userId        String?
  email         String
  campaignId    String?
  type          String // "welcome", "cart_abandonment", "order_confirmation", etc.
  subject       String
  status        String   @default("pending") // "pending", "sent", "failed", "opened", "clicked"
  errorMessage  String?  @db.Text
  metadata      Json? // Additional data like order ID, cart contents, etc.
  sentAt        DateTime?
  openedAt      DateTime?
  clickedAt     DateTime?
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([email])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model CartAbandonment {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  cartItems Json // Cart contents
  cartTotal Int // Total in cents
  reminderSent Boolean @default(false)
  recovered Boolean @default(false)
  recoveredOrderId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([email])
  @@index([reminderSent])
  @@index([createdAt])
}

// Stock notification and waitlist
model StockNotification {
  id          String   @id @default(cuid())
  userId      String?
  email       String
  productSlug String
  size        String
  notified    Boolean  @default(false)
  notifiedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, productSlug, size]) // One notification per email per product/size combo
  @@index([userId])
  @@index([email])
  @@index([productSlug])
  @@index([notified])
  @@index([createdAt])
}

// Saved payment methods (Stripe)
model SavedPaymentMethod {
  id                   String   @id @default(cuid())
  userId               String
  stripePaymentMethodId String  @unique
  type                 String // "card"
  cardBrand            String? // "visa", "mastercard", etc.
  cardLast4            String?
  cardExpMonth         Int?
  cardExpYear          Int?
  isDefault            Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
}

// User sizing preferences for recommendation tool
model UserSizingProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  heightCm        Int? // Height in centimeters
  weightKg        Int? // Weight in kilograms
  chestCm         Int? // Chest measurement in cm
  preferredFit    String   @default("regular") // "slim", "regular", "oversided"
  recommendedSize String? // Calculated recommended size
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Collections for organizing products
model Collection {
  id          String    @id @default(cuid())
  slug        String    @unique
  name        String
  description String?   @db.Text
  imageUrl    String?
  featured    Boolean   @default(false)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@index([slug])
  @@index([featured])
  @@index([sortOrder])
}

// Product model for full database control
model Product {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  description  String   @db.Text
  price        Int // in cents
  currency     String   @default("CAD")
  collectionId String?
  inStock      Boolean  @default(true)
  featured     Boolean  @default(false)

  // Product images - array of image URLs
  images       Json // ["url1", "url2", "url3"]

  // Product details
  fabric       String   @db.Text
  care         String   @db.Text
  shipping     String   @db.Text

  // Variants
  sizes        Json // ["S", "M", "L", "XL", "XXL"]
  colors       Json // ["black", "white", "gray"]
  tags         Json // ["bestseller", "new-arrival"]

  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  collection Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)
  collaborators ProductCollaborator[]

  @@index([slug])
  @@index([collectionId])
  @@index([featured])
  @@index([inStock])
  @@index([createdAt])
}

// Site-wide image assets for admin control
model SiteImage {
  id          String   @id @default(cuid())
  key         String   @unique // "hero-main", "about-hero", "custom-banner", etc.
  url         String
  alt         String?
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}

// Site-wide text content for admin control
model SiteContent {
  id          String   @id @default(cuid())
  key         String   @unique // "hero.title", "hero.description", "footer.copyright", etc.
  value       String   @db.Text
  section     String // "hero", "footer", "navigation", "about", etc.
  description String?  @db.Text // What this content is for
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([section])
}

// Product collaborators - many-to-many relationship
model ProductCollaborator {
  id        String   @id @default(cuid())
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId]) // A user can only be added once per product
  @@index([productId])
  @@index([userId])
}
